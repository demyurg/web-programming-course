/*
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ TypeScript –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
 * –ó–∞–ø—É—Å–∫: npm run build && npm start
 */

console.log('üöÄ TypeScript Lab 1');
console.log('============================================\n');

// –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
function demonstrateBasicTypes() {
    console.log('üìù –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã:');
    
    const name: string = "TypeScript";
    const version: number = 5.0;
    const isAwesome: boolean = true;
    
    console.log(`–Ø–∑—ã–∫: ${name}, –≤–µ—Ä—Å–∏—è: ${version}, –∫—Ä—É—Ç–æ–π: ${isAwesome}\n`);
}

// –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface User {
    id: number;
    name: string;
    email: string;
    isActive?: boolean;
}

function demonstrateInterfaces() {
    console.log('üèóÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:');
    
    const user: User = {
        id: 1,
        name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        email: "anna@example.com",
        isActive: true
    };
    
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
    console.log('');
}

// generic —Ñ—É–Ω–∫—Ü–∏–∏
function identity<T>(arg: T): T {
    return arg;
}

function demonstrateGenerics() {
    console.log('üé≠ Generics:');
    
    const stringResult = identity<string>("Hello TypeScript!");
    const numberResult = identity<number>(42);
    
    console.log('String result:', stringResult);
    console.log('Number result:', numberResult);
    console.log('');
}

// union —Ç–∏–ø—ã
type Status = "loading" | "success" | "error";

function handleStatus(status: Status): string {
    switch (status) {
        case "loading":
            return "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...";
        case "success":
            return "‚úÖ –£—Å–ø–µ—à–Ω–æ!";
        case "error":
            return "‚ùå –û—à–∏–±–∫–∞!";
        default:
            // TypeScript –ø—Ä–æ–≤–µ—Ä–∏—Ç —á—Ç–æ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            const _exhaustive: never = status;
            return _exhaustive;
    }
}

function demonstrateUnionTypes() {
    console.log('üîÄ Union —Ç–∏–ø—ã:');
    
    const statuses: Status[] = ["loading", "success", "error"];
    statuses.forEach(status => {
        console.log(`${status}: ${handleStatus(status)}`);
    });
    console.log('');
}

function main() {
    demonstrateBasicTypes();
    demonstrateInterfaces();
    demonstrateGenerics();
    demonstrateUnionTypes();
    
    console.log('üìÅ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã task1-refactor.js - task6-type-problems.js');
    console.log('üìñ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ');
    console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: npm run dev, npm run build, npm run type-check');
}

main();