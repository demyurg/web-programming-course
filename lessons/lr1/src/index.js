/*
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ TypeScript –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
 * –ó–∞–ø—É—Å–∫: npm run build && npm start
 */
/*
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ TypeScript –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
 * –ó–∞–ø—É—Å–∫: npm run build && npm start
 */
console.log('üöÄ TypeScript Lab 1');
console.log('============================================\n');
// –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
function demonstrateBasicTypes() {
    console.log('üìù –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã:');
    var name = "TypeScript";
    var version = 5.0;
    var isAwesome = true;
    console.log("\u042F\u0437\u044B\u043A: ".concat(name, ", \u0432\u0435\u0440\u0441\u0438\u044F: ").concat(version, ", \u043A\u0440\u0443\u0442\u043E\u0439: ").concat(isAwesome, "\n"));
}
function demonstrateInterfaces() {
    console.log('üèóÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:');
    var user = {
        id: 1,
        name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        email: "anna@example.com",
        isActive: true
    };
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
    console.log('');
}
// generic —Ñ—É–Ω–∫—Ü–∏–∏
function identity(arg) {
    return arg;
}
function demonstrateGenerics() {
    console.log('üé≠ Generics:');
    var stringResult = identity("Hello TypeScript!");
    var numberResult = identity(42);
    console.log('String result:', stringResult);
    console.log('Number result:', numberResult);
    console.log('');
}
function handleStatus(status) {
    switch (status) {
        case "loading":
            return "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...";
        case "success":
            return "‚úÖ –£—Å–ø–µ—à–Ω–æ!";
        case "error":
            return "‚ùå –û—à–∏–±–∫–∞!";
        default:
            // TypeScript –ø—Ä–æ–≤–µ—Ä–∏—Ç —á—Ç–æ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            var _exhaustive = status;
            return _exhaustive;
    }
}
function demonstrateUnionTypes() {
    console.log('üîÄ Union —Ç–∏–ø—ã:');
    var statuses = ["loading", "success", "error"];
    statuses.forEach(function (status) {
        console.log("".concat(status, ": ").concat(handleStatus(status)));
    });
    console.log('');
}
function main() {
    demonstrateBasicTypes();
    demonstrateInterfaces();
    demonstrateGenerics();
    demonstrateUnionTypes();
    console.log('üìÅ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã task1-refactor.js - task6-type-problems.js');
    console.log('üìñ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ');
    console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: npm run dev, npm run build, npm run type-check');
}
main();
